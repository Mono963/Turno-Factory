{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ES2020",                           /* Más moderno, compatible con Node 14+ */
    "module": "commonjs",                         /* Node.js usa CommonJS */
    "lib": ["ES2020"],                            /* Librerías estándar ES2020 para características modernas */
    "jsx": "preserve",                            /* Preserve JSX (default was commented out) */
    "experimentalDecorators": true,               /* Enable experimental support for legacy experimental decorators. */
    "emitDecoratorMetadata": true,                /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                             /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                     /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                        /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                         /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,              /* Emit ECMAScript-standard-compliant class fields. */
    "moduleResolution": "node",                    /* Resolución módulos estilo Node */
    "resolveJsonModule": true,                      /* Permite importar archivos JSON (útil para configs) */
    "allowSyntheticDefaultImports": true,          /* Permite import default aunque no exista */
    "allowJs": false,                               /* No se compilan JS, solo TS */

    /* Modules */
    // "rootDir": "./",                              /* Specify the root folder within your source files. */
    // "baseUrl": "./",                              /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                  /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                               /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                              /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                  /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                 /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                         /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,           /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "rewriteRelativeImportExtensions": true,      /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
    // "resolvePackageJsonExports": true,            /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,            /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                       /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "noUncheckedSideEffectImports": true,         /* Check side effect imports. */
    // "allowArbitraryExtensions": true,             /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                            /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                              /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                              /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                    /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    "outDir": "./dist",                           /* Carpeta salida JS compilado */
    "rootDir": "./src",                           /* Carpeta código fuente TS */
    "sourceMap": true,                            /* Mapas para debugging */
    "removeComments": true,                       /* Código limpio en dist */
    // "declaration": true,                          /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                       /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                  /* Only output d.ts files and not JavaScript files. */
    // "noEmit": true,                               /* Disable emitting files from a compilation. */
    // "outFile": "./",                              /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "mapRoot": "",                                /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                        /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                              /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                            /* Set the newline character for emitting files. */
    // "stripInternal": true,                        /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                        /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                        /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                   /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                       /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    "esModuleInterop": true,                       /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                     /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,     /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                /* Enable all strict type-checking options. */
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": false,
    "noImplicitThis": true,
    "alwaysStrict": true,
    // "noUnusedLocals": true,                       /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                   /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,           /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                    /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,           /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,             /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                   /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,   /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                    /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                 /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                  /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                             /* Skip type checking all .d.ts files. */
  },
  "include": ["src/**/*.ts"],                             /* Carpeta de código a compilar */
  "exclude": ["node_modules", "dist"]             /* Excluir módulos y salida */
}